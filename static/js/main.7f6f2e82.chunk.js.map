{"version":3,"sources":["components/CountryPicker/CountryPicker.module.css","components/Cards/Cards.module.css","Api/index.js","components/Charts/Charts.js","components/Cards/Cards.js","components/CountryPicker/CountryPicker.js","App.js","reportWebVitals.js","index.js","App.module.css","components/Charts/Charts.module.css"],"names":["module","exports","url","fetchData","a","country","length","axios","get","res","data","confirmed","recovered","deaths","lastUpdate","console","log","fetchDaily","map","reportDate","fetchCountries","countries","Charts","state","options","scales","yAxes","ticks","beginAtZero","this","setState","lineData","bardata","labels","datasets","label","total","borderColor","props","backgroundColor","value","className","cls","container","Component","Cards","Grid","spacing","justifyContent","item","component","Card","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","duration","separator","format","CountryPicker","name","FormControl","formControl","NativeSelect","default","onChange","e","handleCountrychange","target","App","fetchedData","image","src","alt","style","width","marginBottom","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7f6f2e82.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2HJD2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__1MHle\",\"card\":\"Cards_card__14oQ7\",\"infected\":\"Cards_infected__3rOvT\",\"recovered\":\"Cards_recovered__GnESI\",\"deaths\":\"Cards_deaths__fpOQF\"};","import axios from 'axios'\r\nvar url = 'https://covid19.mathdro.id/api'\r\nexport const fetchData = async (country='')=>{\r\n     url = 'https://covid19.mathdro.id/api'\r\n    try {\r\n        if(country.length){\r\n            url = `https://covid19.mathdro.id/api/countries/${country}`\r\n        }\r\n        const res = await axios.get(url);\r\n        const data = {\r\n            confirmed:res.data.confirmed,\r\n            recovered:res.data.recovered,\r\n            deaths:res.data.deaths,\r\n            lastUpdate:res.data.lastUpdate\r\n        }\r\n        console.log(data)\r\n        return data;\r\n    } catch (error) {\r\n        \r\n    }\r\n}\r\nexport const fetchDaily = async ()=>{\r\n    var url = 'https://covid19.mathdro.id/api'\r\n    try {\r\n        const res = await axios.get(`${url}/daily`)\r\n        //console.log(res.data)\r\n        const data =  res.data.map(({confirmed,deaths,recovered,reportDate})=>({\r\n            confirmed,\r\n            deaths,\r\n            recovered,\r\n            reportDate\r\n        }));\r\n       // console.log(data);\r\n        return data;\r\n    } catch (error) {   \r\n    }\r\n}\r\nexport const fetchCountries = async ()=>{\r\n    try {\r\n        const res = await axios.get('https://covid19.mathdro.id/api/countries')\r\n       // console.log(res.data.countries)\r\n        return res.data.countries;\r\n    } catch (error) {\r\n        \r\n    }\r\n}","import React, { Component } from 'react'\r\nimport {Line,Bar} from 'react-chartjs-2'\r\nimport {fetchDaily} from '../../Api/index'\r\nimport cls from './Charts.module.css'\r\nclass Charts extends Component {\r\n    state={\r\n        data:[]\r\n    }\r\n    async componentDidMount(){\r\n        const fetchData = await fetchDaily()\r\n        this.setState({\r\n            data:fetchData\r\n        })\r\n    }\r\n       options = {\r\n            scales: {\r\n                yAxes: [\r\n                {\r\n                    ticks: {\r\n                    beginAtZero: true,\r\n                    },\r\n                },\r\n                ],\r\n            },\r\n            };\r\n    render() {\r\n        var lineData;\r\n        if(this.state.data){\r\n        lineData = {\r\n            labels:this.state.data.map(({reportDate})=>reportDate),\r\n            datasets:[\r\n                {\r\n                    label:\"Infected\",\r\n                    data: this.state.data.map(({confirmed})=>confirmed.total ),\r\n                    borderColor: 'rgba(0, 0, 255, 0.5)',\r\n                },\r\n                {\r\n                    label:\"Deaths\",\r\n                    data: this.state.data.map(({deaths})=>deaths.total ),\r\n                    borderColor: 'rgba(255, 0, 0, 0.2)',\r\n                }\r\n            ]\r\n        }\r\n    }\r\n    var bardata;\r\n    if(this.props.data){\r\n        const {confirmed,recovered,deaths}=this.props.data;\r\n        if(!confirmed) return <p>loading</p> ;\r\n         bardata = {\r\n            labels:['Infected','Recoverd','Deaths'],\r\n                            datasets:[\r\n                    {\r\n                        label : 'people',\r\n                        backgroundColor:[\r\n                            'rgba(201, 201, 230, 0.5)',\r\n                            'rgba(0, 255, 0, 0.5)',\r\n                            'rgba(255, 0, 0, 0.5)'\r\n                        ],\r\n                    data:[confirmed.value,recovered.value,deaths.value]\r\n                    }]}\r\n            \r\n        }\r\n        return (\r\n                <div className={cls.container}>\r\n                    {this.props.country?<Bar data ={bardata}/>:<Line data={lineData}/>}\r\n                </div>\r\n        )\r\n}\r\n}\r\nexport default  Charts","import React from 'react'\r\nimport {Card,CardContent,Typography,Grid} from '@material-ui/core'\r\nimport cls from './Cards.module.css'\r\nimport Moment from 'react-moment';\r\nimport CountUp from 'react-countup'\r\nimport cx from 'classnames'\r\nexport const Cards = ({data}) => {\r\n   \r\n   const {confirmed,recovered,deaths,lastUpdate} = data;\r\n    if(!confirmed) return <p>Loading</p>\r\n    return (\r\n        <Grid container spacing={3} justifyContent=\"center\">\r\n            <Grid item  component={Card}   className={cx(cls.card,cls.infected)}>\r\n                <CardContent>\r\n                    <Typography color=\"textPrimary\" gutterBottom>\r\n                         Infected cases\r\n                    </Typography>\r\n                     <Typography variant=\"h5\" >\r\n                        <CountUp start={0} end={confirmed.value} duration={1.5} separator=\",\"/>\r\n                    </Typography>\r\n                    <Typography color=\"textPrimary\">\r\n                        <strong>LastUpdated:{' '}</strong>\r\n                        <Moment format=\"DD/MM/YYYY\">\r\n                            {lastUpdate}\r\n                        </Moment> \r\n                    </Typography>\r\n                    \r\n                </CardContent>\r\n            </Grid>\r\n            <Grid item   component={Card}  className={cx(cls.card,cls.recovered)}>\r\n                <CardContent>\r\n                    <Typography color=\"textPrimary\" gutterBottom>\r\n                         recovered cases\r\n                    </Typography>\r\n                     <Typography variant=\"h5\">\r\n                       <CountUp start={0} end={recovered.value} duration={1.5} separator=\",\"/>\r\n                    </Typography>\r\n                    <Typography color=\"textPrimary\">\r\n                        <strong>LastUpdated:{' '}</strong>\r\n                        <Moment format=\"DD/MM/YYYY\">\r\n                            {lastUpdate}\r\n                        </Moment> \r\n                    </Typography>\r\n                    \r\n                </CardContent>\r\n            </Grid>\r\n            <Grid item  component={Card}  className={cx(cls.card,cls.deaths)}>\r\n                <CardContent>\r\n                    <Typography color=\"textPrimary\" gutterBottom>\r\n                         deaths\r\n                    </Typography>\r\n                     <Typography variant=\"h5\">\r\n                       <CountUp start={0} end={deaths.value} duration={1.5} separator=\",\"/>\r\n                    </Typography>\r\n                    <Typography color=\"textPrimary\">\r\n                        <strong>LastUpdated:{' '}</strong>\r\n                        <Moment format=\"DD/MM/YYYY\">\r\n                            {lastUpdate}\r\n                        </Moment> \r\n                    </Typography>\r\n                    \r\n                </CardContent>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport {fetchCountries} from '../../Api/index'\r\nimport {FormControl,NativeSelect} from '@material-ui/core'\r\nimport cls from './CountryPicker.module.css'\r\nclass CountryPicker extends Component {\r\n    state={\r\n        data:[]\r\n    }\r\n    async componentDidMount(){\r\n        const res = await fetchCountries();\r\n        this.setState({\r\n            data:res\r\n        })\r\n        //console.log(res);\r\n    }\r\n\r\n    render() {\r\n        //console.log(this.state.data[0])\r\n\r\n        var options;\r\n        if(this.state.data.length){\r\n       options = this.state.data.map(({name})=>(\r\n            <option key={name} value = {name}>{name}</option>\r\n        ))\r\n        }\r\n        return (\r\n           <FormControl className={cls.formControl}>\r\n               <NativeSelect default=\"\" onChange={(e)=>{\r\n                   this.props.handleCountrychange(e.target.value)\r\n               }}>\r\n                   <option value = \"\">Global</option>\r\n                    {options}\r\n               </NativeSelect>\r\n           </FormControl>\r\n        )\r\n    }\r\n}\r\nexport default CountryPicker","import React, { Component } from 'react'\nimport Charts  from './components/Charts/Charts'\nimport { Cards } from './components/Cards/Cards'\nimport cls from './App.module.css'\nimport {fetchData} from './Api/index'\nimport CountryPicker from './components/CountryPicker/CountryPicker'\nclass App extends Component {\n  state ={\n    data:{\n      confirmed:0,\n      recovered:0,\n      deaths:0,\n      lastUpdate:0\n    },\n    country:''\n  }\n  async componentDidMount(){\n    const fetchedData = await fetchData();\n    this.setState({data:fetchedData,country:''})\n  }\n  handleCountrychange = async (country)=>{\n    console.log(country.length);\n    const fetchedData = await fetchData(country);\n    this.setState({data:fetchedData,country:country})\n    \n  }\n  render() {\n    const {data,country} = this.state\n    console.log(data)\n    return (\n      <div className={cls.container} >\n        <img className={cls.image} src=\"https://raw.githubusercontent.com/adrianhajdin/project_corona_tracker/master/src/images/image.png\" alt=\"covid19tracker\"/>\n        <hr style={{width:'100%',marginBottom:'20px'}}/>\n      <Cards data={data}/>\n        <CountryPicker handleCountrychange={this.handleCountrychange}/>\n        <Charts data={data} country={country} />\n      </div>\n    )\n  }\n}\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__Pk0BZ\",\"image\":\"App_image__3oN_s\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Charts_container__3-dcu\"};"],"sourceRoot":""}